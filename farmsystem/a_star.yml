# Will test if there is a railroad path from the player's
# location to a fixed, predefined point.
train:
    type: command
    name: train
    description: "Versucht, einen Zug zur aktuellen Position herbeizurufen."
    usage: /train
    script:

        #- wait 5s

        # check if A* is already running
        # and stop this attempt to run the script if that is the case
        - if <server.flag[astar_running]> {

            - narrate "Der Spieler <server.flag[astar_whois]> sucht gerade. Versuche es spaeter noch einmal!"
            - define astar_queue <queue>
            - queue <def[astar_queue]> stop
        }

        # prevent others from running the script simultaneously
        # since the computation is currently rather memory-hungry
        # and record who is currently using the command
        - flag server astar_running:true
        - flag server astar_whois:<player.name>

        # hub position
        - define departure_loc <l@1363,68,25,world.block>
        
        # player position without decimals
        - define destination_loc <player.location.below.block>
        
        # invoke A*
        - define path <proc[a_star].context[<li@%destination_loc%/0/0/null>|<li@%departure_loc%/0/0/null>]>
        
        # if A* could find a proper path, output it,
        # else, give a error reply.
        - if <def[path]> == -1 {

            - narrate "Es konnte kein gueltiger Pfad gefunden werden!"
        } else {

            - narrate "PFAD GEFUNDEN<&co> Laenge war <def[path].size>!"
            - foreach <def[path]> {

                - showfake <m@yellow_wool> <def[value].as_list.get_sub_items[1].get[1]> to:<server.list_online_players> d:<d@10s> 
            }
        }

        # allow access to this command again
        - flag server astar_running:false


# This script implements an A* algorithm for finding the shortest path between
# two points (nodes). This will be used for figuring out the shortest railroad connection
# between a player and a fixed starting point in the enhanced farming world.
#
# Nodes are defined as lists: li@location/g_value/f_value/parent_node_location
a_star:
    type: procedure
    definitions: start|goal
    speed: 1t
    script:
        
        # The cost from the start along the best known path.
        - define g_score 0

        # The previously chosen location.
        - define prevloc null
        
        # Estimated total cost from start to goal through
        # Heuristic function is the straight Euclidean distance.
        - define f_score <def[g_score].add[<def[start].get_sub_items[1].get[1].distance[<def[goal].get_sub_items[1].get[1]>]>]>

        # Update g and f scores of the start node.
        - define startloc <def[start].get_sub_items[1].get[1]>
        - define start <li@%startloc%/%g_score%/%f_score%/null>

        # define goal location for quicker access
        - define goalloc <def[goal].get_sub_items[1].get[1]>
        
        # Nodes waiting to be evaluated. At first, only
        # the "start" node is added.
        - define openset <li@%start%>

        # Nodes that already have been evaluated.
        - define closedset <li@>
        
        # Continue algorithm as long as there nodes to expand
        # in the open set
        - while <def[openset].is_empty.is[EQUALS].to[false]> {
        
            # get node with lowest f value
            - define current <proc[min_f].context[<def[openset].escaped>]> 
           
            # remove current node from the open set ...
            - define remove_index <def[openset].find_all_partial[<def[current].get_sub_items[1].get[1]>]>
            - define openset <def[openset].remove[<def[remove_index]>]>
            
            # ... and add it to the closed set
            - define closedset <def[closedset].include[<def[current]>]>
            
            # if the goal was reached, output the path
            # as a list of locations
            - if <def[current].get_sub_items[1].get[1]> == <def[goalloc]> {

                # current/goal node was added to closed set, but g and f scores
                # don't matter anymore once we're here
                - determine <proc[reconstruct_path].context[<def[closedset].as_list.escaped>|<def[start].as_list.escaped>|<def[goal].as_list.escaped>]>
            }
            
            # DEBUG output, show open set as red wool
            - foreach <def[openset]> {
                - showfake <m@red_wool> <def[value].as_list.get_sub_items[1].get[1]> to:<server.list_online_players> d:<d@30s>
            }

            #- wait 0.05s

            # DEBUG output, show closed set as blue wool
            - foreach <def[closedset]> {
                - showfake <m@blue_wool> <def[value].as_list.get_sub_items[1].get[1]> to:<server.list_online_players> d:<d@30s>
            }

            # get valid neighbors of the current node
            - define neighbor_nodes <proc[find_neighbors].context[<def[current].escaped>|<def[g_score]>|<def[goal].escaped>|<def[closedset].escaped>|<def[prevloc]>]>

            # save chosen neighbor's location as new previous location
            - define prevloc <def[current].get_sub_items[1].get[1]>
            
            # Step through all neighbor nodes of the current node
            - foreach <def[neighbor_nodes]> {

                # calculate a preliminary g value for the current neighbor
                # the movement cost is the distance (currently 1 in each case -- CHECK THIS FOR GOING UP/DOWN)
                - define distance <def[current].as_list.get_sub_items[1].get[1].distance[<def[value].as_list.get_sub_items[1].get[1]>]>
                - define tentative_g_score <def[current].as_list.get_sub_items[2].get[1].add[<def[distance]>]>

                # use neighbor location to check if it is
                # already in the closed/open set
                - define neighbor_loc <def[value].as_list.get_sub_items[1].get[1]>
                - define neighbor_in_open <def[openset].find_all_partial[<def[neighbor_loc]>].is[!EQUALS].to[<li@>]>
                - define neighbor_in_closed <def[closedset].find_all_partial[<def[neighbor_loc]>].is[!EQUALS].to[<li@>]>

                # if neighbor was already in the open set ...
                - if <def[neighbor_in_open]> {
                
                    # fetch index and then the neighbor's g value
                    - define neighbor_open_index <def[openset].find_all_partial[<def[neighbor_loc]>]>
                    - define neighbor_g <def[openset].get[<def[neighbor_open_index]>].as_list.sub_items_get[2].get[1]>

                    # remove neighbor from open set if new path is better
                    # (should only happen when using non-admissable heuristic function)
                    - if <def[tentative_g_score]> < <def[neighbor_g]> {

                        - define openset <def[openset].remove[<def[neighbor_open_index]>]>
                    }
                }

                # if neighbor was already in the closed set
                # and there has been evaluated already ...
                - if <def[neighbor_in_closed]> {
                    
                    # fetch index and then the neighbor node's g value
                    - define neighbor_closed_index <def[closedset].find_all_partial[<def[neighbor_loc]>]>
                    - define neighbor_g <def[closedset].get[<def[neighbor_closed_index]>].as_list.sub_items_get[2].get[1]>

                    # if the cost is less than the g value of the neighbor
                    # remove it from the closed set
                    - if <def[tentative_g_score]> < <def[neighbor_g]> {

                        - define closedset <def[closedset].remove[<def[neighbor_closed_index]>]>
                    }
                }

                # if neighbor is not in the open set and not in the closed set either
                - if <def[neighbor_in_open]> == false && <def[neighbor_in_closed]> == false {

                    # define goal node's location for ease of access
                    - define goal_loc <def[goal].get_sub_items[1].get[1]>

                    # set node location
                    # (it's not actually a different one - just defining for uniformity below)
                    - define new_loc <def[value].as_list.get_sub_items[1].get[1]>

                    # g(x) is the previously calculated cost so far
                    - define new_g_score <def[tentative_g_score]>
                    
                    # [old, manhattan looks better for rails] heuristic h(x) is the straight line distance
                    #- define new_h_score <def[new_loc].distance[<def[goal_loc]>]>
                    
                    # heuristic h(x) is the manhattan distance
                    - define f_x <def[new_loc].x.sub[<def[goal_loc].x>].abs>
                    - define f_y <def[new_loc].y.sub[<def[goal_loc].y>].abs>
                    - define f_z <def[new_loc].z.sub[<def[goal_loc].z>].abs>
                    - define new_h_score <def[f_x].add[<def[f_y].add[<def[f_z]>]>]>

                    # function value f(x) is g(x) + h(x) 
                    - define new_f_score <def[new_g_score].add[<def[new_h_score]>]>
                    
                    # set parent node
                    - define new_came_from <def[current].get_sub_items[1].get[1]>                    
   
                    # set neighbor's updated attributes
                    - define new_neighbor %new_loc%/%new_g_score%/%new_f_score%/%new_came_from%

                    # add updated neighbor to open set                    
                    - define openset <def[openset].include[<def[new_neighbor]>]>
                }
            }
            #- wait 0.05s
        }
        
        # If we reach the end of the loop without
        # having returned upon encountering the goal node,
        # there was no way from start to goal.
        - determine -1

# This helper script reconstructs the path the algorithm
# has taken, using the "came_from" field in the nodes' definitions.
reconstruct_path:
    type: procedure
    definitions: closedset|start|current
    speed: 1t
    script:
        - define closedset <def[closedset].unescaped>
        - define start <def[start].unescaped>
        - define current <def[current].unescaped>
        
        # path from start to goal
        - define total_path <li@>
        
        # while current node is in the the closed set ...
        - define parent_id <def[current].as_list.get_sub_items[1].get[1]>

        # while we haven't arrived at the start node
        - while <def[parent_id].is[!EQUALS].to[<def[start].get_sub_items[1].get[1]>]> {

            # ... find previous node by its id saved in the came_from field
            - define current <def[closedset].get[<def[closedset].find_all_partial[<def[parent_id]>].get[1]>]>
            
            #- showfake <m@black_wool> <def[current].as_list.get_sub_items[1].get[1]>
            #- wait 0.05s

            # and update the parent id by fetching the current node's parent id
            - define parent_id <def[current].as_list.get_sub_items[4].get[1]>

            # path begins with the last node, so insertions
            # have to be made in reverse order to output the
            # path from start to finish!
            - define total_path <def[total_path].insert[<def[current]>].at[0]>
        }

        - determine <def[total_path]>



# This helper script finds all valid neighbors of a passed node as
# a list, which will contain a maximum of four nodes.
# This means that potentially all non-diagonal blocks from y+1 to y-1
# around the origin block can be considered, since rail tracks can
# only be placed on blocks that have a maximum y difference of 1.
find_neighbors:
    type: procedure
    definitions: node|g_score|goal|closedset|prevloc
    speed: 1t
    script:
        - define node <def[node].unescaped>
        - define goal <def[goal].unescaped>
        - define closedset <def[closedset].unescaped>

        # If the current node is the start node, there is no previous
        # node, so to find out whether we are ascending, descending or
        # staying at the same height, the previous node is assumed to be the
        # start node as well.
        - if <def[node].get_sub_items[4].get[1]> == null {
            - define prevloc <def[node].get_sub_items[1].get[1]>
        }

        # center location whose neighbors shall
        # be found by this procedure
        - define loc <def[node].as_list.get_sub_items[1].get[1]>

        # output list of valid neighbors
        - define valid_neighbors <li@>
        
        # Start from top (y+1)
        # Direction: z-1
        - define x <def[loc].x>
        - define y <def[loc].y.add[1]>
        - define z <def[loc].z.sub[1]>
        - define world <def[loc].world.name>
        
        - define n1 <l@%x%,%y%,%z%,%world%>
        
        # Direction: z+1
        - define x <def[loc].x>
        - define y <def[loc].y.add[1]>
        - define z <def[loc].z.add[1]>
        
        - define n2 <l@%x%,%y%,%z%,%world%>
        
        # Direction: x-1
        - define x <def[loc].x.sub[1]>
        - define y <def[loc].y.add[1]>
        - define z <def[loc].z>
        
        - define n3 <l@%x%,%y%,%z%,%world%>
        
        # Direction: x+1
        - define x <def[loc].x.add[1]>
        - define y <def[loc].y.add[1]>
        - define z <def[loc].z>
        
        - define n4 <l@%x%,%y%,%z%,%world%>
        
        # Neighboring blocks to be checked
        - define checklist <li@%n1%|%n2%|%n3%|%n4%>
        
        - foreach <def[checklist]> {
        
            - define goal_loc <def[goal].get_sub_items[1].get[1]>
        
            # get valid neighbor location or -1 if there was none in that direction
            - define neighbor_loc <proc[check_rail_placeable].context[<def[value]>|<def[prevloc]>]>

            # jump to next direction since no valid neighbor existed
            - if <def[neighbor_loc]> == -1 {
                - foreach next
            }

            # define came_from value as the parent node's location
            - define neighbor_parent <def[node].get_sub_items[1].get[1]>

            # define neighbor's attribute values
            # start with dummy g/f values
            - define neighbor %neighbor_loc%/0/0/%neighbor_parent%
       
            # Add valid neighbor to the output list
            - define valid_neighbors <def[valid_neighbors].include[<def[neighbor]>]>
        }
        
        # return list of valid neighbors
        - determine <def[valid_neighbors]>
        

# This helper script checks if a rail can be placed on the passed block or the two
# below it, and returns a valid block location if there was any.
# Careful: The block BELOW the rail has to be compatible, so when the rail is put
# into place, it has to be placed above the location since it is an entity!
#
# Strategy: For each direction, check the blocks
# top-down. Because the maximum y difference is 1,
# the first valid (= rail-compatible, i.e. not water)
# block denies access to the blocks below it, so these
# do not have to be checked unless the blocks above them
# are air.
check_rail_placeable:
    type: procedure
    definitions: loc|prevloc
    speed: 1t
    script:
        # loop ending condition
        - define status continue
        
        # retain origin location by using
        # a new variable
        - define inloc <def[loc]>
        
        # dummy output location for the case
        # that no block matches
        - define outloc -1

        # start at top block and go down a maximum
        # of two blocks from the origin loc
        - while true {
            #- wait 0.2s

            # hack because while parser can't use two conditions yet Zz
            - if <def[status]> != continue || <def[loc].y.sub[<def[inloc].y>]> >= 3 {
                - while stop
            }

            #- showfake <m@green_wool> <def[inloc]> d:<d@0.5s>

            # The material of the block the rail should be placed on must
            # be solid (i.e. not water, air...)
            - if <def[inloc].material.is_solid> == true {
            
                # Block is solid, but must not be transparent (chests, glass..)
                - if <def[inloc].material.is_transparent> == false {
                
                    # Block is solid and non-transparent, check if air above
                    - if <def[inloc].above.material> == <m@air> {
                        
                        # determine if the rail is currently ascending, descending
                        # or on the same height as on the previous block
                        #- define asc <def[prevloc].y.sub[<def[inloc].y

                        # Rail is placeable!
                        - define status abort
                        - define outloc <def[inloc]>
                        
                    # Block is solid and non-transparent,
                    # but there is no free space above
                    } else {
                    
                        # this blocks all potential neighbors below, abort
                        - define status abort
                    }
                
                # Block is solid, but transparent
                } else {
                    
                    # this blocks all potential neighbors below, abort
                    - define status abort
                }
            
            # Block is not solid
            } else {
                
                # if the block is air, the block below might be suitable
                - if <def[inloc].material> == <m@air> {
                
                    # continue with block below
                    - define status continue
                    
                    # location data
                    - define in_x <def[inloc].x>
                    - define in_y <def[inloc].y.sub[1]>
                    - define in_z <def[inloc].z>
                    - define in_world <def[inloc].world.name>

                    - define inloc <l@%in_x%,%in_y%,%in_z%,%in_world%>
                
                # else, there's water or lava, which means that the
                # block below is either solid or also water/lava
                } else {
                
                    # hence abort search
                    - define status abort
                }
            }    
        }
        
        # finally return the valid neighbor block or default value -1, if there was none
        - determine <def[outloc]>
        

        
# This helper script finds the node with the lowest f value
# in the open set and returns it.
min_f:
    type: procedure
    definitions: openset
    speed: 1t
    script:
        - define openset <def[openset].unescaped]>

        # set dummy value 
        - define min_f 999999
        
        # Find minimum f-value in the open set
        - foreach <def[openset]> {
            
            # fetch node's f value
            - define current_f <def[value].as_list.get_sub_items[3].get[1]>

            # compare f-values
            - if <def[current_f]> < <def[min_f]> {
                - define min_f <def[current_f]>
                - define min_node <def[value]>
            }
        }
        
        - determine <def[min_node].as_list>
