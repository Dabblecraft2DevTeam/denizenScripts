# Defines various scripts for the Blackjack game
# at the casino. See also blackjack.yml.
# For all scripts requiring a location parameter the following is true:
# The location is one block in front of and one block below the lower left corner of the card.

# Set an empty, white card.
bj_create_base:
    type: task
    speed: 1t
    definitions: loc
    script:
        - schematic load name:bj_base
        - schematic paste name:bj_base <def[loc].as_location>
        - schematic unload name:bj_base

# Delete the current card.
bj_remove:
    type: task
    speed: 1t
    definitions: loc
    script:
        - schematic load name:bj_remove
        - schematic paste name:bj_remove <def[loc].as_location>
        - schematic unload name:bj_remove

# Draw the backside of a card.
bj_create_back:
    type: task
    speed: 1t
    definitions: loc
    script:
        - schematic load name:bj_back
        - schematic paste name:bj_black <def[loc].as_location>
        - schematic unload name:bj_back

# Display the card with the value "val" and the color "color" at the position "loc".
# "Val" can be 2 - 10, "jack", "queen", "king" or "ace".
# Color can be "red" or "black".
bj_create_card:
    type: task
    speed: 1t
    definitions: loc|val|color
    script:
        - schematic load name:bj_%val%_%color%
        - schematic paste name:bj_%val%_%color% <def[loc].as_location>
        - schematic unload name:bj_%val%_%color%


# Create a new list containing 52 cards (a normal deck).
bj_create_deck:
    type: procedure
    speed: 1t
    script:
        # Pik (Schwarz)
        - define deck <li@li@spades/2/black|li@li@spades/3/black|li@li@spades/4/black|li@li@spades/5/black|li@li@spades/6/black|li@spades/7/black|li@spades/8/black|li@spades/9/black|li@spades/10/black|li@spades/jack/black|li@spades/queen/black|li@spades/king/black|li@spades/ace/black>
        # Herz (Rot)
        - define deck <%deck%.include[li@hearts/2/red|li@hearts/3/red|li@hearts/4/red|li@hearts/5/red|li@hearts/6/red|li@hearts/7/red|li@hearts/8/red|li@hearts/9/red|li@hearts/10/red|li@hearts/jack/red|li@hearts/queen/red|li@hearts/king/red|li@hearts/ace/red]>
        # Karo (Rot)
        - define deck <%deck%.include[li@diamonds/2/red|li@diamonds/3/red|li@diamonds/4/red|li@diamonds/5/red|li@diamonds/6/red|li@diamonds/7/red|li@diamonds/8/red|li@diamonds/9/red|li@diamonds/10/red|li@diamonds/jack/red|li@diamonds/queen/red|li@diamonds/king/red|li@diamonds/ace/red]>
        # Kreuz (Schwarz)
        - define deck <%deck%.include[li@clubs/2/black|li@clubs/3/black|li@clubs/4/black|li@clubs/5/black|li@clubs/6/black|li@clubs/7/black|li@clubs/8/black|li@clubs/9/black|li@clubs/10/black|li@clubs/jack/black|li@clubs/queen/black|li@clubs/king/black|li@clubs/ace/black]>
        #- define deck <li@li@clubs/ace/black>


        - determine %deck%


# Debug function. Shows all cards in the passed deck.
bj_show_deck:
    type: task
    speed: 1t
    definitions: deck
    script:
        - foreach <def[deck].as_list.unescaped> {
            - narrate "DECK<&co> %loop_index% %value%"
        } 


# Draw a random card from the deck. This script is injected into
# the main blackjack script, so that the card can be removed from the
# deck afterwards.
bj_choose_card:
    type: task
    speed: 1t
    script:
        - define drawn <%deck%.random>
        - define deck <%deck%.remove[<%deck%.find[%drawn%]>]>
        
        
# Convenience function. Extracts the value of a card.
bj_getValue:
    type: procedure
    speed: 1t
    definitions: card|cscore
    script:
        - define name <def[card].get_sub_items[2].get[1]>
        - narrate "NAME<&co> %name%"
        
        # Normal cards have a value that is equal to their number ...
        - if %name% == 2 || %name% == 3 || %name% == 4 || %name% == 5 || %name% == 6 || %name% == 7 || %name% == 8 || %name% == 9 || %name% == 10 {
            - determine %name%
        # Face cards always have a value of 10.
        } else if %name% == jack || %name% == queen || %name% == king {
            - determine 10
        # Aces have a value of 1 or 11, depending on the player's choice. TODO!
        } else if %name% == ace {
            # save queue id for restarting this script
            #- flag server bj_queue:<queue>
            
            # Script is currently choosing number aggressively:
            # if Score < 11, 11 is chosen.
            - if <def[cscore]> < 11 {
                - determine 10
            } else {
                - determine 1
            }
        }
        
# Convenience function. Extracts the card's name
# and translates it to its German equivalent.
bj_getName:
    type: procedure
    speed: 1t
    definitions: card
    script:
        - define cardval <def[card].get_sub_items[2].get[1]>
        
        - if %cardval% == 1 || %cardval% == 2 || %cardval% == 3 || %cardval% == 4 || %cardval% == 5 || %cardval% == 6 || %cardval% == 7 || %cardval% == 8 || %cardval% == 9 || %cardval% == 10 {
            - determine %cardval%
        } else if %cardval% == jack {
            - determine Bube
        } else if %cardval% == queen {
            - determine Dame
        } else if %cardval% == king {
            - determine Koenig
        } else {
            - determine Ass
        }

# Convenience function. Extracts the card's symbol
# and translates it to its German equivalent.
bj_getSymbol:
    type: procedure
    speed: 1t
    definitions: card
    script:
        - define cardcolor <def[card].get_sub_items[1].get[1]>
        - if %cardcolor% == diamonds {
            - determine Karo-
        } else if %cardcolor% == hearts {
            - determine Herz-
        } else if %cardcolor% == spades {
            - determine Pik-
        } else {
            - determine Kreuz-
        }